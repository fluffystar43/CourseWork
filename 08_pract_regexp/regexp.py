# Вариант №3
import re

def regex(massData, regPattern):
    for i in massData:
        result = re.search(regPattern, i)
        if result != None: print(i, 'Подходит')
        else: print(i, 'Не подходит')
    print()
    
# =============================================================================
#                 Задание 3
# Написать регулярное выражение для проверки адреса IP4. 
# Проверку на превышение значений 255 включать не нужно.
# =============================================================================
massIp = ['192.168.0.1', '127.0.0.1', '0.0.0.0',
        '0.100.200.300', 'a.b.c.d', '192.168.0.', '1234.2345.3456.4567']
regPattern = r'^([0-9]{1,3}[\.]){3}[0-9]{1,3}'
regex(massIp, regPattern)

# =============================================================================
#                 Задание 8
# Написать регулярное выражение, проверяющее строку на соответствие 
# даты заданному формату: dd.mm.yyyy. Дата в строке должна быть отделена 
# от текста пробелами. Для числа и месяца отводится строго 
# по 2 цифры, для года – 4 цифры. Проверку на допустимость чисел 
# (не более 31) и месяца (не более 12) реализовывать не нужно.
# =============================================================================
massDate = ['12.03.2016', '02.05.1928', '12/03/2016', '12-03-2016', '2016.03.12', 
        '2016 03 12', '5.3.2016']
regPattern = r'(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.]((19|20)\d\d)'
regex(massDate, regPattern)

# =============================================================================
#             10 задание
# Написать регулярное выражение, проверяющее строку на соответствие 
# допустимому имени файлов. Допустимыми являются имена, состоящие 
# из букв, с расширениями png, jpg, jpeg, gif.
# =============================================================================
massFiles = ['test.png', 'test.jpeg', 'test.jpg', 'test.gif', 'test.php', 
        'test.exe', '~!@$%.png', '<?php test.png ?>']
regPattern = r'^[a-z]+\.(png|jpg|jpeg|gif)$'
regex(massFiles, regPattern)